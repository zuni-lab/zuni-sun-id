on:
  push:
    branches:
      - main
    paths:
      - 'ui/**'
      - '.github/workflows/deploy-ui.yml'
      - 'docker/ui.dockerfile'      

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  REGISTRY: ghcr.io
  REPO_NAME: ${{ github.repository }}
  BASE_APP_DIR: /root/zuni/ui 

name: Build and Deploy

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      APP_IMAGE: ${{ steps.set_repo_name.outputs.APP_IMAGE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lower case repository name
        id: set_repo_name
        run: |
          echo "APP_IMAGE=${{ env.REGISTRY }}/$(echo "${{ env.REPO_NAME }}" | tr '[:upper:]' '[:lower:]'):ui" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-release
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/ui.dockerfile 
          push: true
          tags: ${{ steps.set_repo_name.outputs.APP_IMAGE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
  
  deploy:
    name: Deploy to production 
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to production 
        uses: appleboy/ssh-action@master
        if: ${{ github.ref_name == 'main' }}
        env:
          APP_IMAGE: ${{ needs.build.outputs.APP_IMAGE }}
        with:
          host: ${{ secrets.STG_SSH_HOST }}
          username: root
          key: ${{ secrets.STG_SSH_PASSWORD }}
          script: |
            mkdir -p ${{ env.BASE_APP_DIR }}
            cd ${{ env.BASE_APP_DIR }}
            export CR_PAT=${{ secrets.GITHUB_TOKEN }}
            echo $CR_PAT | docker login ${{ env.REGISTRY }} -u ${{ github.repository }} --password-stdin
            docker pull ${{ needs.build.outputs.APP_IMAGE }}
            docker compose down --remove-orphans
            docker compose up -d
            docker image prune -f
            docker container prune -f
